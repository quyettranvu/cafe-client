{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { GlobalConstants } from '../shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./snackbar.service\";\n//Route-guard will decode token received from authService and return authorized user(role user or admin) or not\nexport let RouteGuardService = /*#__PURE__*/(() => {\n  class RouteGuardService {\n    constructor(auth, router, snackbarService) {\n      this.auth = auth;\n      this.router = router;\n      this.snackbarService = snackbarService;\n    }\n    canActivate(route) {\n      let expectedRoleArray = route.data;\n      expectedRoleArray = expectedRoleArray.expectedRole;\n      const token = localStorage.getItem('token');\n      var tokenPayload;\n      try {\n        if (token) tokenPayload = jwtDecode(token);\n      } catch (error) {\n        localStorage.clear();\n        this.router.navigate(['/']);\n      }\n      let expectedRole = '';\n      for (let i = 0; i < expectedRole.length; i++) {\n        if (expectedRole[i] === tokenPayload.role) {\n          expectedRole = tokenPayload.role;\n        }\n      }\n      if (tokenPayload.role === 'user' || tokenPayload.role === 'admin') {\n        if (this.auth.isAuthenticated() && tokenPayload.role === expectedRole) {\n          return true;\n        }\n        //token from storage not equal to user on authorizing or token invalid...\n        this.snackbarService.openSnackBar(GlobalConstants.unauthorized, GlobalConstants.error);\n        this.router.navigate(['/cafe/dashboard']);\n        return false;\n      } else {\n        this.router.navigate(['/']);\n        localStorage.clear();\n        return false;\n      }\n    }\n  }\n  RouteGuardService.ɵfac = function RouteGuardService_Factory(t) {\n    return new (t || RouteGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SnackbarService));\n  };\n  RouteGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RouteGuardService,\n    factory: RouteGuardService.ɵfac,\n    providedIn: 'root'\n  });\n  return RouteGuardService;\n})();","map":null,"metadata":{},"sourceType":"module"}