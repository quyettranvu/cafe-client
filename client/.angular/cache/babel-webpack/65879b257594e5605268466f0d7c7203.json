{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs/index';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let TokenInterceptorInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptorInterceptor {\n    constructor(router) {\n      this.router = router;\n    }\n    intercept(request, next) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearere ${token}`\n          }\n        });\n      }\n      return next.handle(request).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse) {\n          console.log(error.url);\n          //Unauthorized or Fobbiden\n          if (error.status === 401 || error.status === 403) {\n            if (this.router.url === '/') {} else {\n              localStorage.clear();\n              this.router.navigate(['/']);\n            }\n          }\n        }\n        return throwError(error);\n      }));\n    }\n  }\n  TokenInterceptorInterceptor.ɵfac = function TokenInterceptorInterceptor_Factory(t) {\n    return new (t || TokenInterceptorInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n  TokenInterceptorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorInterceptor,\n    factory: TokenInterceptorInterceptor.ɵfac\n  });\n  return TokenInterceptorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}